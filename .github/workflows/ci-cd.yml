name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: memorygraph
  ECS_SERVICE: memorygraph-service
  ECS_CLUSTER: memorygraph-cluster
  ECS_TASK_DEFINITION: memorygraph-task

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: memorygraph_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        # Install graph services dependencies separately to avoid conflicts
        pip install -r requirements-graph.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Wait for database
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for database..."
          sleep 2
        done

    - name: Run Python tests
      run: |
        cd backend
        python -m pytest tests/ -v
      env:
        TESTING: true
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/memorygraph_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
        NEO4J_URI: neo4j+s://ccdb15e5.databases.neo4j.io
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: JomXr6Xl1bPVwqogQvAANbOZMnzYB7n5GqM39AV8nok
        NEO4J_DATABASE: neo4j
        GRAPH_EXTRACTION_LLM_PROVIDER: openai
        GRAPH_EXTRACTION_MODEL: gpt-4o-nano
        EXTRACTOR_SERVICE_URL: http://localhost:8002
        INSERTER_SERVICE_URL: http://localhost:8003
        RETRIEVER_SERVICE_URL: http://localhost:8004

    - name: Run Node.js tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Deploy to Dev Environment (from develop branch)
  deploy-dev:
    needs: [test, deploy-infrastructure-dev]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: dev
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-dev-backend

    - name: Build and push frontend image
      run: |
        cd frontend
        docker build --build-arg REACT_APP_API_URL=/api/v1 -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-dev-frontend

    - name: Build and push extractor service image
      run: |
        cd backend/graph-services/extractor-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-dev-extractor-service

    - name: Build and push inserter service image
      run: |
        cd backend/graph-services/inserter-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-dev-inserter-service

    - name: Build and push retriever service image
      run: |
        cd backend/graph-services/retriever-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-dev-retriever-service

    - name: Deploy to ECS (Dev)
      run: |
        # Update backend service
        aws ecs update-service \
          --cluster memorygraph-dev-cluster \
          --service memorygraph-dev-service \
          --force-new-deployment
        
        # Update frontend service
        aws ecs update-service \
          --cluster memorygraph-dev-cluster \
          --service memorygraph-dev-frontend-service \
          --force-new-deployment || echo "Frontend service not found, skipping"
        
        # Update graph services if they exist
        aws ecs update-service \
          --cluster memorygraph-dev-cluster \
          --service memorygraph-dev-extractor-service \
          --force-new-deployment || echo "Extractor service not found, skipping"
        
        aws ecs update-service \
          --cluster memorygraph-dev-cluster \
          --service memorygraph-dev-inserter-service \
          --force-new-deployment || echo "Inserter service not found, skipping"
        
        aws ecs update-service \
          --cluster memorygraph-dev-cluster \
          --service memorygraph-dev-retriever-service \
          --force-new-deployment || echo "Retriever service not found, skipping"

  # Deploy to Prod Environment (from main branch)
  deploy-prod:
    needs: [test, deploy-infrastructure-prod]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: prod
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-prod-backend

    - name: Build and push frontend image
      run: |
        cd frontend
        docker build --build-arg REACT_APP_API_URL=/api/v1 -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-prod-frontend

    - name: Build and push extractor service image
      run: |
        cd backend/graph-services/extractor-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-prod-extractor-service

    - name: Build and push inserter service image
      run: |
        cd backend/graph-services/inserter-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-prod-inserter-service

    - name: Build and push retriever service image
      run: |
        cd backend/graph-services/retriever-service
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: memorygraph-prod-retriever-service

    - name: Deploy to ECS (Prod)
      run: |
        # Update backend service
        aws ecs update-service \
          --cluster memorygraph-cluster \
          --service memorygraph-service \
          --force-new-deployment
        
        # Update frontend service
        aws ecs update-service \
          --cluster memorygraph-cluster \
          --service memorygraph-frontend-service \
          --force-new-deployment || echo "Frontend service not found, skipping"
        
        # Update graph services if they exist
        aws ecs update-service \
          --cluster memorygraph-cluster \
          --service memorygraph-extractor-service \
          --force-new-deployment || echo "Extractor service not found, skipping"
        
        aws ecs update-service \
          --cluster memorygraph-cluster \
          --service memorygraph-inserter-service \
          --force-new-deployment || echo "Inserter service not found, skipping"
        
        aws ecs update-service \
          --cluster memorygraph-cluster \
          --service memorygraph-retriever-service \
          --force-new-deployment || echo "Retriever service not found, skipping"

  # Infrastructure deployment jobs
  deploy-infrastructure-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: dev
    timeout-minutes: 15
    continue-on-error: false

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init (Dev)
      run: |
        cd infrastructure/environments/dev
        terraform init

    - name: Terraform Plan (Dev)
      run: |
        cd infrastructure/environments/dev
        terraform plan -var="database_password=${{ secrets.DATABASE_PASSWORD_DEV }}"

    - name: Terraform Apply (Dev)
      run: |
        cd infrastructure/environments/dev
        terraform apply -auto-approve -var="database_password=${{ secrets.DATABASE_PASSWORD_DEV }}"

  deploy-infrastructure-prod:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: prod
    timeout-minutes: 15
    continue-on-error: false

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init (Prod)
      run: |
        cd infrastructure/environments/prod
        terraform init

    - name: Terraform Plan (Prod)
      run: |
        cd infrastructure/environments/prod
        terraform plan -var="database_password=${{ secrets.DATABASE_PASSWORD_PROD }}"

    - name: Terraform Apply (Prod)
      run: |
        cd infrastructure/environments/prod
        terraform apply -auto-approve -var="database_password=${{ secrets.DATABASE_PASSWORD_PROD }}"